Anything thta can be executed in the command line can be put into a shell
script.
*Great for automating tasks*

If a script does not uses a shebang the commands are executed 
uding your current shell-(Different shell use different syntax)

Variables: 
    VARIABLE_NAME="Value"

Tests: 
    [ condition-to-test-for ]

    [ -e /etc/passwd ]


** if [ condition-to-test ]
    then 
        command 1
        command 2
        command N   
    fi

*** for VARIABLE_NAME in item1 itemN
    do 
        command
    done
    
* Positional Parameters:
    script.sh 
        $0: "script.sh"

* Accepting USER Input (STDIN)
    read command accepts STDIN

* Seperate commands with a semicolon to ensure to ensure they all 
    get executed 
    The semicolon does not ensure the exit status

* All shell scripts exit with a exit status:
    Default value is the exit status of the last command
    Or we can explicitly define the return status;
        exit 0
        exit 255 at the end of the shell script
    The exit command can be executed at any point in the script,
    When the exit command is executed the shell script stops running

** $$ is the pit command number of times the shell is executed 
